/**
 *
 */
function setKeyValue(Object $o, $key_arg, $value, $option=null){

  //b_debug::_dbg();
  if ($key_arg==='e_inst' && $value=='Home') abortIt("!!!!!!!!!!!!!!!!!");
  if(empty($key_arg)) abortIt("??? Empty key");

  /**
   */
  $getKey = function($key_arg,$expectObject=true){
    if($expectObject){
      $key      = (is_object($key_arg) ? $key_arg : (is_object($f=fields()->get($key_arg)) ? $f : $key_arg));
      $key_name = (is_object($key)
		   ? $key->name
		   : $key);
      if(!is_object($key)) say::notice("setKeyValue(): \"$key\" is not a field");
    }else{
      if(is_object($key_arg)) { echo tidy_dump($key_arg); abortIt("??? $key->title"); }
      $key = $key_name = $key_arg;
    }
    //      b_debug::_dbg(is_object($key));
    return [$key,$key_name];
  };
  
  /**
   */
  $setKeyValue_simple = function(Object $o, String $key,$value,$option){
    global $dejaVu_key;
    static $roles = ['viewRoles','editRoles','addRoles','createRoles'];
    if(($tRoles = ($o instanceof Template) && in_array($key,$roles))){
      if(!$o->$key)     $o->$key = [];
      if(!$o->useRoles) $o->useRoles = 1;
      if(!$o->hasRole($g=roles()->get('guest'))) $o->setRoles([$g->id]);
      $o->save();
    }
    $got = $now = ($tRoles
		   ? (in_array($value->id, $o->$key) ? $value->name : null)
		   : $o->$key);
    if($got == $value){
      if (!@$dejaVu_key[$o->name.$key]++) say::ok($o,$key,(is_object($value)?$value->name:$value));
    }else{
      if($tRoles){
	$o->setRoles(array_merge($o->$key,[$value->id]), str_replace('Roles','',$key));
	$got = (in_array($value->id, $o->$key) ? $value->name : null);
      }else{
	$o->$key = $value;
	$got = $o->$key;
      }
      if($option !== false) $o->save();
      say::add($o, $key, $value, $now, $got, $o->$key);
    }
    return [$now,$got];
  };

  /**
   */
  $setTags = function(Object $o, $key, $value, $option){
    $got = $now = $o->getTags(true);
    if ($o->hasTag($value)){
      say::ok($o,$key,$value);
    }else{
      $o->addTag($value);
      if($option !== false) $o->save();
      say::add($o, $key, $value, $now, $got=$o->getTags(true), $o->$key);
    }
    return [$now,$got];
  };

  //
  // Fields, Templates
  //
  if ($o instanceof Field ||
      $o instanceof Template){ // ==========================================================================================================================

    list($key,$key_name) = $getKey($key_arg,$expectObject=false);
    if($key_name == 'tags'){
      list($now,$got) = $setTags($o, $key_name, $value, $option);
    }else{
      list($now,$got) = $setKeyValue_simple($o, $key,$value,$option);
    }

    /*
    }elseif(false && in_array($key,['roles','createRoles','editRoles','addRoles'])){
      $o->$key = $value;
      $o->save();
      echo tidy_dump($o->$key, __function__."($o, $key, "._formatData($value).")");
    }elseif(false && in_array($key,['viewRoles','editRoles'])){// editRoles (roles which may edit template)  ===================================
      $type = str_replace('Roles','',$key);
      if ($o instanceof Template){
	//if($key != 'editRoles') abortIt("??? I guess for $o the key should be 'editRoles', not '$key'");
	if ($o->hasRole($value,$type)){
	  say::ok($o,$key,$value->name);
	}else{
	  $roles = $o->getRoles();
	  $roles->add($value);
	  echo	tidy_dump($roles,'roles');
	  $o->setRoles($roles,$type);
	  if($option !== false) $o->save();
	  say::add($o, $key, $value, $now='', $got=($o->hasRole($value,$type)?$value->name:''));
	  if(empty($got)) say::warning(sprintf("%s(%s,$key,$value->name) can't be set",__function__,$o->name));
	}
      }elseif($o instanceof Field){
	//if($key != 'viewRoles') abortIt("??? I guess for $o the key should be 'viewRoles', not '$key'");
	if(($now = @$o->$key) == $value){
	  say::ok($o,$key,$value);
	}else{
	  $o->$key = $value;
	  if($option !== false) $o->save();
	  say::load($o, $key, $value, $now, $got=$o->get($key), $o->$key);
	}
      }else{
	abortIt("Unexpected argument ".tidy_dump($o,'get_object_name'));
      }
    }
    */

  }elseif ($o instanceof Role){// ==========================================================================================================================

    list($key,$key_name) = $getKey($key_arg,$expectObject=false);

    if($key == 'permission'){
      if(!($value instanceof Permission)) abortIt(_formatData($value)." is not instanceof Permission");
      if ($o->hasPermission($value)){
	say::ok($o,$key,$value->name);
      }else{
	$result = $o->addPermission($value);
	if($option !== false) $o->save();
	say::add($o, $key, $value->name, $now='', $got=($o->hasPermission($value)?$value->name:''));
	if (!$result) say::warning(sprintf("%s(%s,$key,$value->name) can't be set",__function__,$o->name));
      }
    }else abortIt("Unexpected argument");

  }elseif ($o instanceof User){// ==========================================================================================================================

    list($key,$key_name) = $getKey($key_arg,$expectObject=false);

    if($key == 'role'){
      if ($o->hasRole($value)){
	say::ok($o,$key,($now=$got=$value));
      }else{
	$result = $o->addRole($value);
	
	if($option !== false) { $o->of(false); $o->save(); $o->of(true); }
	say::add($o, $key, $value, $now='', $got=($o->hasRole($value)?$value:''));
	if (!$result) say::warning(sprintf("%s(%s,$key,$value) can't be set",__function__,$o->name));
      }
    }else{
      list($now,$got) = $setKeyValue_simple($o, $key,$value,$option);
    }

  }elseif ($o instanceof Page){// ==========================================================================================================================

    list($key,$key_name) = $getKey($key_arg,$expectObject=true);
    $o->of(false);

    if(!empty($o->av_current_er)&&count($o->av_current_er) && templates()->get('ea_emp_record')->fieldgroup->hasField($f=preg_replace("/^av_/","er_",$key_name))){

      // Employment record has precedence over person
      return setKeyValue($o->av_current_er->first, $f, $value, $option);

    }elseif($key instanceof FieldtypeDatetime){                                    // FieldtypeDatetime ====================================================

      list($now,$got) = $setKeyValue_simple($o,
					    $key,
					    ($key->hasTag('date')
					     ? b_time::datetime2date($value)
					     : b_time::txt2unix($value)),
					    $option);

    }elseif(is_object($key) && ($key->hasTag('country') || $key->tags=='country')){// Field  'country' =====================================================

      $value = b_cc::get($value);
      if(empty($value)) return;
      if($o->$key && (pageName(($now=$o->$key->title)) == pageName($value))){
	say::ok($o,$key,($got=$value));
      }else{
	if(!($page_country = pages()->get("name=".pageName($value)))){
	  $page_country = new Page();
	  $page_country->name  = pageName($key_name);
	  $page_country->title = $value;
	  $page_country->template = 'country';
	  $page_country->parent = pages()->get('template=countries');
	  $page_country->save();
	  b_debug::_dbg("Creating ".$page_country->title);
	}
	if($o->$key instanceof PageArray) $o->$key->add($page_country); else $o->$key = $page_country;
	if($option !== false) $o->save();
	say::load($o, $key, $value, (empty($now)?'':$now), $got=@$o->$key->title);
      }

    }elseif (is_object($key) && $key->type instanceof FieldtypePage){ // FieldtypePage  =====================================================

      if($key_name == 'er_org_position' && !is_object($value)){
	$value = findPageByTitle($value,['org_position']);
      }
      if (!is_object($value)) { tidy_dump($key,$key_name); abortIt(var_export($value,true)." is not an object"); }
      if ($o->id == $value->id) abortIt("Linking $value->name to itself");
      if($ok=($o->$key instanceof PageArray)
	 ? $o->$key->has($got=$now=$value)
	 : !empty($o->$key) && (($got=$now=$o->$key->title) == $value->title)){
	say::ok($o,$key_name,$now);
      }else{
	/**  Later...
	     if($value->template=='ea_emp_record' && (time() > $o->timestamp+48*3600)){ // Reset the timestamp every 2 days
	      $o->timestamp = time();
	      $o->$key = new PageArray();
	     }
	*/
      	if($o->$key instanceof PageArray){
	  $o->$key->add($value);
	  $o->$key->save();
	  $got = ($o->$key->has($value) ? $value->title : "?");
	}else{
	  $o->$key = $value;
	  $got = (is_object($o->$key) ? $o->$key->title : null);
	}
	if($option !== false) $o->save();
	say::hook($o, $key, $value->title, $now="", $got, $o->$key);
      }

    }elseif ($o->$key instanceof LanguagesPageFieldValue){ // Languages  ==================================================================

      $langID =  (is_numeric($option) ? $option : languages()->get($option)->id);
      $lang_name=(is_numeric($option) ? languages()->get($langID)->name : $option);
      $fl  = ($langID==0 ? $key : "${key}_${lang_name}");
      $got = $now = trim($langID==0
			 ? $o->$key->getDefaultValue()
			 : $o->$key->getLanguageValue($langID));
      $pf = ($langID == 0 ? "" : $langID);
      // echo"lang_name=$lang_name fl=$fl langID=$langID now=$now value=$value\n";
      if ($now == $value){
	say::ok ($o,$fl,_formatData($now));
	$o->set("status$pf", (empty($pf) ? 'unique' : 1));
	if($option !== false) $o->save();
      }else{
	if (empty($value) && !empty($now)){
	  say::warning(sprintf(__function__."(%s,%s,%s,%s)",$o->name,$key_name,$value,$option)."\ncancels value $o->name.$key_name now==\"$now\"");
	}else{
	  if($langID == 0) $o->$key = $value;
	  else             $o->$key->setLanguageValue($langID,$value);
	  $o->set("status$pf", 1);
	  if($option !== false) $o->save();
	if (!is_object($o->$key)) $o->$key = new LanguagesPageFieldValue($o,$key); // Well...
	say::load($o,$fl,$value,$now,$got=($langID==0?$o->$key->getDefaultValue():$o->$key->getLanguageValue($langID)));
	}
      }

    }elseif($key_name == 'images'){                         // Images  =====================================================================

      $hasImage = function($o,$fn,$verbose=false)
	{ if($o->images->has($fn)){
	    // echo "OK hasImage(has) $fn\n";
	    return true;
	  }else{ // debug...
	    foreach($o->images as $i){
	      if(($x=basename($i->filename)) == $fn){
		// echo "OK hasImage(img) $fn\n";
		return true;
	      }elseif($verbose){
		if(!@$counter++) printf("---%s\n",var_export($fn,true));
		printf("   %s\n",var_export($x,true));
	      }
	    }
	  }
	  return false;
	};

      $sani = function($image_path)
	{ return preg_replace('/_(gif|jpg|jpeg|png)$/','.\\1',
			      str_replace(['.','-'],'_',basename(sanitizer()->filename(strToLower($image_path))))); };

      if (!is_array($value)) $value = [$value];
      if (!$o->images) $o->images = new Pageimages($o);
      foreach (array_unique($value) as $image_path){
	$fn = $now = $got = $sani($image_path);
	if($hasImage($o,$fn,true)){
	  say::ok ($o,$key_name,$fn);
	}else{
	  //echo "$fn does not exist\n"; return;
  	  $o->of(false);
	  $o->images->add($image_path);
	  if($option !== false) $o->save();
	  say::load($o,$key_name,$fn,$now="",$got=($hasImage($o,$fn,false) ? $fn : ""),$o->$key_name);
	}
      }

    }elseif ($key_name == 'parent'){                   // Parent =======================================================================

      if (empty($value->id)) abortIt("'parent' argument is not a page: "._formatData($value));
      if (($got=$now=$o->parent->name) == $value->name){
	say::ok($o,'parent',$value->name);
      }else{
	$o->parent = $value;
	if($option !== false) $o->save();
	say::hl(sprintf(">> Hook %s.parent(%s) = %s", $o->name, $o->parent->id, ($got=$o->parent->name)),'g');
      }

    }elseif ($o->$key instanceof SelectableOptionArray){  // Options =======================================================================

      if (is_object($value)) abortIt("unexpected object "._formatData($value));
      $f=fields()->get($key);
      $Manager = new SelectableOptionManager();
      if($opt = $Manager->getOptions($f,['value'=>$value])->last){
	$got = $now = getValue($f, $o);
	if ($o->$key->hasValue($value)){
	  say::ok($o,$key,$value);
	}else{
	  $o->$key->setField($f);
	  $o->$key->add($opt);
	  if($option !== false) { $o->save(); $o->$key->save(); }
	  say::load($o, $key, $value, $now, ($got = getValue($f,$o)), $o->$key);
	}
      }else{
	say::warning(sprintf("%s(%s,$key,$value) Option can't be set",__function__,$o->name));
      }

    }elseif($key == 'tags'){                          // Tags ========================================================================

      list($now,$got) = $setTags($o, $key, $value, $option);

    }else{                                           // ===========================================================================

      if($key_name == 'title' && is_string($value)){
	$value = preg_replace("/^\d\d\d\d\d\d-/","", trim(str_replace(['[>]', '   ', '  '], ' ',
								      escape_uml(strip_tags($v_orig=$value)))));
	// if($value != $v_orig) say::notice("fix title: \"$v_orig\" ==> \"$value\"");
      }
      list($now,$got) = $setKeyValue_simple($o, $key,$value,$option);
    }
  }else{
    echo tidy_dump($o,$msg="Unexpected argument ");
    abortIt($msg);
  }
  if (empty($got) && !empty($now)){abortIt(sprintf(__function__."(%s,%s,%s,%s)",$o->name,$key_name,$value,$option)."\ncancels value $o->name.$key now==\"$now\" got=\"\"");}
}

<?php namespace ProcessWire;

require_once "/Users/yb/Sites/sh/index.php";

/**
 * Create a page if not yet done (hook done by an argument)
 *
 * @param $data array
 * return page|nullPage
 */
function createPage(Array $data=[], Array $skipFields=[], Array $args=[]){
  $selector = "template=".$args['template'];
  if( empty($data['title'])) $data['title'] = $args['title'];
  if(!empty($args['hook'])) $selector .= sprintf(", %s=%s",$args['hook'],sanitizer()->selectorValue($data[$args['hook']]));
  $page = pages()->get($selector);
  if($page->id){
    // OK
  }else{
    //static::_dbg("$data[title]",'m',false,1);
    //if(empty($parent = pages()->get("template=$args[template]s")) || !$parent->id){
    if(empty($parent = pages()->get("template=".($parent_tp=config_getParent($args['template'])))) || !$parent->id){
      $parent = new Page();
      $parent->name    = $parent_tp;
      $parent->template= $parent_tp;
      $parent->title   = ucwords($parent_tp);
      $parent->parent  = pages()->get("template=".config_getParent($parent_tp));
      $parent->save();
    }
    $page = new Page();
    $page->name = pageName(empty($args['name']) ? $data['title'] : $args['name']);
    $page->template = $args['template'];
    $page->parent   = $parent;
    foreach($data as $k=>$v){
      if(!in_array($k,$skipFields) && !b_posix::is_empty($v)) setKeyValue($page, $k, $v, false);
    }
      $page->save();
  }
  return $page;
}

/**
 *
 */
function escape_uml($text,$direction='<-'){

  static $TT = ['&' => '&amp;',
		'À' => '&Agrave;',   'Á' => '&Aacute;',	  'Â' => '&Acirc;',	'Ã' => '&Atilde;',  '<' => '&lt;',
		'Ä' => '&Auml;',     'Å' => '&Aring;',	  'à' => '&agrave;',	'á' => '&aacute;',  '>' => '&gt;',
		'â' => '&acirc;',    'ã' => '&atilde;',	  'ä' => '&auml;',	'å' => '&aring;',   ' ' => '&nbsp;',
		'Æ' => '&AElig;',    'æ' => '&aelig;',	  'ß' => '&szlig;',	'Ç' => '&Ccedil;',  '"' => '&quot;',
		'ç' => '&ccedil;',   'È' => '&Egrave;',	  'É' => '&Eacute;',	'Ê' => '&Ecirc;',   '-' => '&#8209;', // '‑' => '&#8209;',
		'Ë' => '&Euml;',     'è' => '&egrave;',	  'é' => '&eacute;',	'ê' => '&ecirc;',   '[' => '&#91;',
		'ë' => '&euml;',     'ƒ' => '&#131;',	  'Ì' => '&Igrave;',	'Í' => '&Iacute;',  ']' => '&#93;',
		'Î' => '&Icirc;',    'Ï' => '&Iuml;',	  'ì' => '&igrave;',	'í' => '&iacute;',  "'" => '&#039;',
		'î' => '&icirc;',    'ï' => '&iuml;',	  'Ñ' => '&Ntilde;',	'ñ' => '&ntilde;',
		'Ò' => '&Ograve;',   'Ó' => '&Oacute;',	  'Ô' => '&Ocirc;',	'Õ' => '&Otilde;',
		'Ö' => '&Ouml;',     'ò' => '&ograve;',	  'ó' => '&oacute;',	'ô' => '&ocirc;',
		'õ' => '&otilde;',   'ö' => '&ouml;',	  'Ø' => '&Oslash;',	'ø' => '&oslash;',
		'Œ' => '&#140;',
		'œ' => '&#156;',
		'Š' => '&#138;',
		'š' => '&#154;',
		'Ù' => '&Ugrave;',
		'Ú' => '&Uacute;',
		'Û' => '&Ucirc;',
		'Ü' => '&Uuml;',
		'ù' => '&ugrave;',
		'ú' => '&uacute;',
		'û' => '&ucirc;',
		'ü' => '&uuml;',
		'µ' => '&#181;',
		'×' => '&#215;',
		'Ý' => '&Yacute;',
		'Ÿ' => '&#159;',
		'ý' => '&yacute;',
		'ÿ' => '&yuml;',
		'°' => '&#176;',
		'†' => '&#134;',
		'‡' => '&#135;',
		'±' => '&#177;',
		'«' => '&#171;',
		'»' => '&#187;',
		'¿' => '&#191;',
		'¡' => '&#161;',
		'·' => '&#183;',
		'•' => '&#149;',
		'™' => '&#153;',
		'©' => '&copy;',
		'®' => '&reg;',
		'§' => '&#167;',
		'¶' => '&#182;',
		];
  if ($direction == '<-'){
    $reply = str_replace(array_values($TT),array_keys($TT),$text);
    if(0)    if (preg_match("/&[\w\#]*;/",$reply)){
      tidy_dump(diff(preg_split("/[\n\s]/",$text),		     preg_split("/[\n\s]/",$reply)));
      echo      htmlDiff($text,$reply);
      abortIt();
    }
  }else{
  }
  return $reply;
}

$desc = function(Page $p) {return "   ".trim(escape_uml(sprintf("   %s, %s, %s",
								$p->h_aw_brand->each("{title}"),
								$p->title,
								$p->h_aw_person->each("{title}, "))),', ')."\n"; };

//print_r(pages()->get("title=La Torre")); exit;
//foreach(($pages=pages()->find("template=h_person")) as $p) echo "$p->template $p->title\n";
foreach(($pages=pages()->find("template=h_artwork,sort=h_aw_brand")) as $p){
  //  echo $p->h_aw_brand->each("{title}")." ".$p->title." ".$p->h_aw_person->each("{title}")." ================================================\n";
  echo "===============".$desc($p);
  //  foreach($p->fields() as $f) if($p->$f) echo "$f->name: ".$p->$f."\n";
  //  print_r($p);
  //  exit;
}
echo "\n";

foreach(explode("\n",file_get_contents('list.txt')) as $line){
  if(empty(trim($line))) continue;
  
  //echo "$line\n";
  list($carre,$ln,$fn,$y,$cmt) = explode(',', preg_replace('/, */', ',', $line),5);
  $y = trim($y,'/');
  printf("%-30s %-25s %-15s %s\n",$carre,"$fn $ln",$y,$cmt);
  $ln = preg_replace("/La /","",$ln);
  $fn = preg_replace("/La /","",$fn);

  // Lookup the author
  if(strpos($fn.$ln,'&') === false){
    $p = pages()->get("template=h_person, h_av_lastname~=".str_replace('La ','',$ln));
    if($p->id)     echo ""; // "!!!!!!!!!!!!!!!!!!!!!!!! $p->title\n";
    else           echo "???????????????????????? $fn $ln\n";
  }else{
    list($a1,$a2) = explode('&',$fn.$ln);
    $p1 = pages()->get("template=h_person, h_av_lastname~=$a1");
    $p2 = pages()->get("template=h_person, h_av_lastname~=$a2");
    if($p1->id)    echo ""; // "!!!!!!!!!!!!!!!!!!!!!!!! $p1->title\n";
    else           echo "???????????????????????? $a1\n";
    if($p2->id)    echo ""; // "!!!!!!!!!!!!!!!!!!!!!!!! $p2->title\n";
    else           echo "???????????????????????? $a2\n";
  }

  // Lookup the carre
  if(count($pages=pages()->find("template=h_artwork, title~=$carre"))){
    foreach($pages as $p) echo $desc($p);
  }else{
    $items = []; foreach(explode(' ',$carre) as $item) if(strlen($item) > 3) $items[] = $item;
    if(($p=pages()->get("template=h_artwork, title~=".join(' ',$items)))->id) echo $desc($p);
  }
  
}
